using System;
using System.Threading.Tasks;
using MailKit.Net.Smtp;
using MimeKit;
using Microsoft.Extensions.Configuration;

namespace API_WebH3.Services;

public class EmailPaymentService
{
    private readonly IConfiguration _configuration;

    public EmailPaymentService(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    public async Task SendEmailAsync(string toEmail, string subject, string body)
    {
        try
        {
            Console.WriteLine($"üîπ B·∫Øt ƒë·∫ßu g·ª≠i email ƒë·∫øn: {toEmail}");

            // Log c·∫•u h√¨nh SMTP ƒë·ªÉ ki·ªÉm tra
            var smtpServer = _configuration["SmtpSettings:Server"];
            var smtpPort = int.Parse(_configuration["SmtpSettings:Port"]);
            var smtpUser = _configuration["SmtpSettings:Username"];
            var smtpPass = _configuration["SmtpSettings:Password"];
            var senderName = _configuration["SmtpSettings:SenderName"];
            var senderEmail = _configuration["SmtpSettings:SenderEmail"];

            Console.WriteLine($"üîπ C·∫•u h√¨nh SMTP: Server={smtpServer}, Port={smtpPort}, Username={smtpUser}, SenderName={senderName}, SenderEmail={senderEmail}");

            // T·∫°o MimeMessage
            var email = new MimeMessage();
            email.From.Add(new MailboxAddress(senderName, senderEmail));
            email.To.Add(MailboxAddress.Parse(toEmail));
            email.Subject = subject;

            var bodyBuilder = new BodyBuilder { HtmlBody = body };
            email.Body = bodyBuilder.ToMessageBody();

            // Ki·ªÉm tra c·∫•u h√¨nh
            if (string.IsNullOrEmpty(smtpServer) || string.IsNullOrEmpty(smtpUser) || string.IsNullOrEmpty(smtpPass))
            {
                throw new InvalidOperationException("C·∫•u h√¨nh SMTP kh√¥ng ƒë·∫ßy ƒë·ªß. Vui l√≤ng ki·ªÉm tra SmtpSettings.");
            }

            // K·∫øt n·ªëi SMTP
            using var smtp = new SmtpClient();
            await smtp.ConnectAsync(smtpServer, smtpPort, MailKit.Security.SecureSocketOptions.StartTls);
            await smtp.AuthenticateAsync(smtpUser, smtpPass);

            // G·ª≠i email
            await smtp.SendAsync(email);
            await smtp.DisconnectAsync(true);

            Console.WriteLine($"‚úÖ Email ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn {toEmail}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå L·ªói khi g·ª≠i email ƒë·∫øn {toEmail}: {ex.Message}");
            throw;
        }
    }
}